'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(), _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
 Global.System.ComponentModel.ToolboxItem(True), _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
 Global.System.Xml.Serialization.XmlRootAttribute("AppData"), _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Partial Public Class AppData
  Inherits Global.System.Data.DataSet

  Private tableApp As AppDataTable

  Private tableAppType As AppTypeDataTable

  Private relationFK_AppType_App As Global.System.Data.DataRelation

  Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Sub New()
    MyBase.New()
    Me.BeginInit()
    Me.InitClass()
    Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
    AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
    AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
    Me.EndInit()
  End Sub

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
    MyBase.New(info, context, False)
    If (Me.IsBinarySerialized(info, context) = True) Then
      Me.InitVars(False)
      Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
      AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
      AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
      Return
    End If
    Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
    If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
      Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
      ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
      If (Not (ds.Tables("App")) Is Nothing) Then
        MyBase.Tables.Add(New AppDataTable(ds.Tables("App")))
      End If
      If (Not (ds.Tables("AppType")) Is Nothing) Then
        MyBase.Tables.Add(New AppTypeDataTable(ds.Tables("AppType")))
      End If
      Me.DataSetName = ds.DataSetName
      Me.Prefix = ds.Prefix
      Me.Namespace = ds.Namespace
      Me.Locale = ds.Locale
      Me.CaseSensitive = ds.CaseSensitive
      Me.EnforceConstraints = ds.EnforceConstraints
      Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
      Me.InitVars()
    Else
      Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
    End If
    Me.GetSerializationData(info, context)
    Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
    AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
    AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
  End Sub

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
   Global.System.ComponentModel.Browsable(False), _
   Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property App() As AppDataTable
    Get
      Return Me.tableApp
    End Get
  End Property

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
   Global.System.ComponentModel.Browsable(False), _
   Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
  Public ReadOnly Property AppType() As AppTypeDataTable
    Get
      Return Me.tableAppType
    End Get
  End Property

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
   Global.System.ComponentModel.BrowsableAttribute(True), _
   Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
  Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
    Get
      Return Me._schemaSerializationMode
    End Get
    Set(value As Global.System.Data.SchemaSerializationMode)
      Me._schemaSerializationMode = value
    End Set
  End Property

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
   Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
  Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
    Get
      Return MyBase.Tables
    End Get
  End Property

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
   Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
  Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
    Get
      Return MyBase.Relations
    End Get
  End Property

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Protected Overrides Sub InitializeDerivedDataSet()
    Me.BeginInit()
    Me.InitClass()
    Me.EndInit()
  End Sub

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Overrides Function Clone() As Global.System.Data.DataSet
    Dim cln As AppData = CType(MyBase.Clone, AppData)
    cln.InitVars()
    cln.SchemaSerializationMode = Me.SchemaSerializationMode
    Return cln
  End Function

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Protected Overrides Function ShouldSerializeTables() As Boolean
    Return False
  End Function

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Protected Overrides Function ShouldSerializeRelations() As Boolean
    Return False
  End Function

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
    If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
      Me.Reset()
      Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
      ds.ReadXml(reader)
      If (Not (ds.Tables("App")) Is Nothing) Then
        MyBase.Tables.Add(New AppDataTable(ds.Tables("App")))
      End If
      If (Not (ds.Tables("AppType")) Is Nothing) Then
        MyBase.Tables.Add(New AppTypeDataTable(ds.Tables("AppType")))
      End If
      Me.DataSetName = ds.DataSetName
      Me.Prefix = ds.Prefix
      Me.Namespace = ds.Namespace
      Me.Locale = ds.Locale
      Me.CaseSensitive = ds.CaseSensitive
      Me.EnforceConstraints = ds.EnforceConstraints
      Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
      Me.InitVars()
    Else
      Me.ReadXml(reader)
      Me.InitVars()
    End If
  End Sub

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
    Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
    Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
    stream.Position = 0
    Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
  End Function

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Friend Overloads Sub InitVars()
    Me.InitVars(True)
  End Sub

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Friend Overloads Sub InitVars(ByVal initTable As Boolean)
    Me.tableApp = CType(MyBase.Tables("App"), AppDataTable)
    If (initTable = True) Then
      If (Not (Me.tableApp) Is Nothing) Then
        Me.tableApp.InitVars()
      End If
    End If
    Me.tableAppType = CType(MyBase.Tables("AppType"), AppTypeDataTable)
    If (initTable = True) Then
      If (Not (Me.tableAppType) Is Nothing) Then
        Me.tableAppType.InitVars()
      End If
    End If
    Me.relationFK_AppType_App = Me.Relations("FK_AppType_App")
  End Sub

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Private Sub InitClass()
    Me.DataSetName = "AppData"
    Me.Prefix = ""
    Me.Namespace = "http://tempuri.org/ApplicationData.xsd"
    Me.EnforceConstraints = True
    Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    Me.tableApp = New AppDataTable()
    MyBase.Tables.Add(Me.tableApp)
    Me.tableAppType = New AppTypeDataTable()
    MyBase.Tables.Add(Me.tableAppType)
    Dim fkc As Global.System.Data.ForeignKeyConstraint
    fkc = New Global.System.Data.ForeignKeyConstraint("FK_AppType_App", New Global.System.Data.DataColumn() {Me.tableAppType.id_AppTypeColumn}, New Global.System.Data.DataColumn() {Me.tableApp.id_AppTypeColumn})
    Me.tableApp.Constraints.Add(fkc)
    fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
    fkc.DeleteRule = Global.System.Data.Rule.Cascade
    fkc.UpdateRule = Global.System.Data.Rule.Cascade
    Me.relationFK_AppType_App = New Global.System.Data.DataRelation("FK_AppType_App", New Global.System.Data.DataColumn() {Me.tableAppType.id_AppTypeColumn}, New Global.System.Data.DataColumn() {Me.tableApp.id_AppTypeColumn}, False)
    Me.Relations.Add(Me.relationFK_AppType_App)
  End Sub

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Private Function ShouldSerializeApp() As Boolean
    Return False
  End Function

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Private Function ShouldSerializeAppType() As Boolean
    Return False
  End Function

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
    If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
      Me.InitVars()
    End If
  End Sub

  <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
   Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
    Dim ds As AppData = New AppData()
    Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
    Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
    Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
    any.Namespace = ds.Namespace
    sequence.Items.Add(any)
    type.Particle = sequence
    Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
    If xs.Contains(dsSchema.TargetNamespace) Then
      Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
      Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
      Try
        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
        dsSchema.Write(s1)
        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
        Do While schemas.MoveNext
          schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
          s2.SetLength(0)
          schema.Write(s2)
          If (s1.Length = s2.Length) Then
            s1.Position = 0
            s2.Position = 0

            Do While ((s1.Position <> s1.Length) _
                        AndAlso (s1.ReadByte = s2.ReadByte))


            Loop
            If (s1.Position = s1.Length) Then
              Return type
            End If
          End If

        Loop
      Finally
        If (Not (s1) Is Nothing) Then
          s1.Close()
        End If
        If (Not (s2) Is Nothing) Then
          s2.Close()
        End If
      End Try
    End If
    xs.Add(dsSchema)
    Return type
  End Function

  <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Delegate Sub AppRowChangeEventHandler(ByVal sender As Object, ByVal e As AppRowChangeEvent)

  <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Delegate Sub AppTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As AppTypeRowChangeEvent)

  '''<summary>
  '''Represents the strongly named DataTable class.
  '''</summary>
  <Global.System.Serializable(), _
   Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Partial Public Class AppDataTable
    Inherits Global.System.Data.TypedTableBase(Of AppRow)

    Private columnid_App As Global.System.Data.DataColumn

    Private columnAppPath As Global.System.Data.DataColumn

    Private columnid_AppType As Global.System.Data.DataColumn

    Private columnStartWithXBMC As Global.System.Data.DataColumn

    Private columnKeepFocus As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.TableName = "App"
      Me.BeginInit()
      Me.InitClass()
      Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
      MyBase.New()
      Me.TableName = table.TableName
      If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
        Me.CaseSensitive = table.CaseSensitive
      End If
      If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
        Me.Locale = table.Locale
      End If
      If (table.Namespace <> table.DataSet.Namespace) Then
        Me.Namespace = table.Namespace
      End If
      Me.Prefix = table.Prefix
      Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
      MyBase.New(info, context)
      Me.InitVars()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property id_AppColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnid_App
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property AppPathColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnAppPath
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property id_AppTypeColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnid_AppType
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property StartWithXBMCColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnStartWithXBMC
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property KeepFocusColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnKeepFocus
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False)> _
    Public ReadOnly Property Count() As Integer
      Get
        Return Me.Rows.Count
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Default Public ReadOnly Property Item(ByVal index As Integer) As AppRow
      Get
        Return CType(Me.Rows(index), AppRow)
      End Get
    End Property

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event AppRowChanging As AppRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event AppRowChanged As AppRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event AppRowDeleting As AppRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event AppRowDeleted As AppRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overloads Sub AddAppRow(ByVal row As AppRow)
      Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overloads Function AddAppRow(ByVal id_App As String, ByVal AppPath As String, ByVal parentAppTypeRowByFK_AppType_App As AppTypeRow, ByVal StartWithXBMC As Boolean, ByVal KeepFocus As Boolean) As AppRow
      Dim rowAppRow As AppRow = CType(Me.NewRow, AppRow)
      Dim columnValuesArray() As Object = New Object() {id_App, AppPath, Nothing, StartWithXBMC, KeepFocus}
      If (Not (parentAppTypeRowByFK_AppType_App) Is Nothing) Then
        columnValuesArray(2) = parentAppTypeRowByFK_AppType_App(0)
      End If
      rowAppRow.ItemArray = columnValuesArray
      Me.Rows.Add(rowAppRow)
      Return rowAppRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function FindByid_App(ByVal id_App As String) As AppRow
      Return CType(Me.Rows.Find(New Object() {id_App}), AppRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overrides Function Clone() As Global.System.Data.DataTable
      Dim cln As AppDataTable = CType(MyBase.Clone, AppDataTable)
      cln.InitVars()
      Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
      Return New AppDataTable()
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub InitVars()
      Me.columnid_App = MyBase.Columns("id_App")
      Me.columnAppPath = MyBase.Columns("AppPath")
      Me.columnid_AppType = MyBase.Columns("id_AppType")
      Me.columnStartWithXBMC = MyBase.Columns("StartWithXBMC")
      Me.columnKeepFocus = MyBase.Columns("KeepFocus")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitClass()
      Me.columnid_App = New Global.System.Data.DataColumn("id_App", GetType(String), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnid_App)
      Me.columnAppPath = New Global.System.Data.DataColumn("AppPath", GetType(String), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnAppPath)
      Me.columnid_AppType = New Global.System.Data.DataColumn("id_AppType", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnid_AppType)
      Me.columnStartWithXBMC = New Global.System.Data.DataColumn("StartWithXBMC", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnStartWithXBMC)
      Me.columnKeepFocus = New Global.System.Data.DataColumn("KeepFocus", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnKeepFocus)
      Me.Constraints.Add(New Global.System.Data.UniqueConstraint("AppKey1", New Global.System.Data.DataColumn() {Me.columnid_App}, True))
      Me.columnid_App.AllowDBNull = False
      Me.columnid_App.Unique = True
      Me.columnAppPath.AllowDBNull = False
      Me.columnid_AppType.AllowDBNull = False
      Me.columnStartWithXBMC.DefaultValue = CType(False, Boolean)
      Me.columnKeepFocus.DefaultValue = CType(False, Boolean)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function NewAppRow() As AppRow
      Return CType(Me.NewRow, AppRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
      Return New AppRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function GetRowType() As Global.System.Type
      Return GetType(AppRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanged(e)
      If (Not (Me.AppRowChangedEvent) Is Nothing) Then
        RaiseEvent AppRowChanged(Me, New AppRowChangeEvent(CType(e.Row, AppRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanging(e)
      If (Not (Me.AppRowChangingEvent) Is Nothing) Then
        RaiseEvent AppRowChanging(Me, New AppRowChangeEvent(CType(e.Row, AppRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleted(e)
      If (Not (Me.AppRowDeletedEvent) Is Nothing) Then
        RaiseEvent AppRowDeleted(Me, New AppRowChangeEvent(CType(e.Row, AppRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleting(e)
      If (Not (Me.AppRowDeletingEvent) Is Nothing) Then
        RaiseEvent AppRowDeleting(Me, New AppRowChangeEvent(CType(e.Row, AppRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub RemoveAppRow(ByVal row As AppRow)
      Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
      Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
      Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
      Dim ds As AppData = New AppData()
      Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
      any1.Namespace = "http://www.w3.org/2001/XMLSchema"
      any1.MinOccurs = New Decimal(0)
      any1.MaxOccurs = Decimal.MaxValue
      any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any1)
      Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
      any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
      any2.MinOccurs = New Decimal(1)
      any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any2)
      Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
      attribute1.Name = "namespace"
      attribute1.FixedValue = ds.Namespace
      type.Attributes.Add(attribute1)
      Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
      attribute2.Name = "tableTypeName"
      attribute2.FixedValue = "AppDataTable"
      type.Attributes.Add(attribute2)
      type.Particle = sequence
      Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
      If xs.Contains(dsSchema.TargetNamespace) Then
        Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Try
          Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
          dsSchema.Write(s1)
          Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
          Do While schemas.MoveNext
            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
            s2.SetLength(0)
            schema.Write(s2)
            If (s1.Length = s2.Length) Then
              s1.Position = 0
              s2.Position = 0

              Do While ((s1.Position <> s1.Length) _
                          AndAlso (s1.ReadByte = s2.ReadByte))


              Loop
              If (s1.Position = s1.Length) Then
                Return type
              End If
            End If

          Loop
        Finally
          If (Not (s1) Is Nothing) Then
            s1.Close()
          End If
          If (Not (s2) Is Nothing) Then
            s2.Close()
          End If
        End Try
      End If
      xs.Add(dsSchema)
      Return type
    End Function
  End Class

  '''<summary>
  '''Represents the strongly named DataTable class.
  '''</summary>
  <Global.System.Serializable(), _
   Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
  Partial Public Class AppTypeDataTable
    Inherits Global.System.Data.TypedTableBase(Of AppTypeRow)

    Private columnid_AppType As Global.System.Data.DataColumn

    Private columnAppTypeName As Global.System.Data.DataColumn

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.TableName = "AppType"
      Me.BeginInit()
      Me.InitClass()
      Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub New(ByVal table As Global.System.Data.DataTable)
      MyBase.New()
      Me.TableName = table.TableName
      If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
        Me.CaseSensitive = table.CaseSensitive
      End If
      If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
        Me.Locale = table.Locale
      End If
      If (table.Namespace <> table.DataSet.Namespace) Then
        Me.Namespace = table.Namespace
      End If
      Me.Prefix = table.Prefix
      Me.MinimumCapacity = table.MinimumCapacity
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
      MyBase.New(info, context)
      Me.InitVars()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property id_AppTypeColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnid_AppType
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property AppTypeNameColumn() As Global.System.Data.DataColumn
      Get
        Return Me.columnAppTypeName
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False)> _
    Public ReadOnly Property Count() As Integer
      Get
        Return Me.Rows.Count
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Default Public ReadOnly Property Item(ByVal index As Integer) As AppTypeRow
      Get
        Return CType(Me.Rows(index), AppTypeRow)
      End Get
    End Property

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event AppTypeRowChanging As AppTypeRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event AppTypeRowChanged As AppTypeRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event AppTypeRowDeleting As AppTypeRowChangeEventHandler

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Event AppTypeRowDeleted As AppTypeRowChangeEventHandler

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overloads Sub AddAppTypeRow(ByVal row As AppTypeRow)
      Me.Rows.Add(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overloads Function AddAppTypeRow(ByVal id_AppType As Short, ByVal AppTypeName As String) As AppTypeRow
      Dim rowAppTypeRow As AppTypeRow = CType(Me.NewRow, AppTypeRow)
      Dim columnValuesArray() As Object = New Object() {id_AppType, AppTypeName}
      rowAppTypeRow.ItemArray = columnValuesArray
      Me.Rows.Add(rowAppTypeRow)
      Return rowAppTypeRow
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function FindByid_AppType(ByVal id_AppType As Short) As AppTypeRow
      Return CType(Me.Rows.Find(New Object() {id_AppType}), AppTypeRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overrides Function Clone() As Global.System.Data.DataTable
      Dim cln As AppTypeDataTable = CType(MyBase.Clone, AppTypeDataTable)
      cln.InitVars()
      Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
      Return New AppTypeDataTable()
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub InitVars()
      Me.columnid_AppType = MyBase.Columns("id_AppType")
      Me.columnAppTypeName = MyBase.Columns("AppTypeName")
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitClass()
      Me.columnid_AppType = New Global.System.Data.DataColumn("id_AppType", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnid_AppType)
      Me.columnAppTypeName = New Global.System.Data.DataColumn("AppTypeName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
      MyBase.Columns.Add(Me.columnAppTypeName)
      Me.Constraints.Add(New Global.System.Data.UniqueConstraint("AppTypeKey1", New Global.System.Data.DataColumn() {Me.columnid_AppType}, True))
      Me.columnid_AppType.AllowDBNull = False
      Me.columnid_AppType.Unique = True
      Me.columnAppTypeName.AllowDBNull = False
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function NewAppTypeRow() As AppTypeRow
      Return CType(Me.NewRow, AppTypeRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
      Return New AppTypeRow(builder)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function GetRowType() As Global.System.Type
      Return GetType(AppTypeRow)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanged(e)
      If (Not (Me.AppTypeRowChangedEvent) Is Nothing) Then
        RaiseEvent AppTypeRowChanged(Me, New AppTypeRowChangeEvent(CType(e.Row, AppTypeRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowChanging(e)
      If (Not (Me.AppTypeRowChangingEvent) Is Nothing) Then
        RaiseEvent AppTypeRowChanging(Me, New AppTypeRowChangeEvent(CType(e.Row, AppTypeRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleted(e)
      If (Not (Me.AppTypeRowDeletedEvent) Is Nothing) Then
        RaiseEvent AppTypeRowDeleted(Me, New AppTypeRowChangeEvent(CType(e.Row, AppTypeRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
      MyBase.OnRowDeleting(e)
      If (Not (Me.AppTypeRowDeletingEvent) Is Nothing) Then
        RaiseEvent AppTypeRowDeleting(Me, New AppTypeRowChangeEvent(CType(e.Row, AppTypeRow), e.Action))
      End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub RemoveAppTypeRow(ByVal row As AppTypeRow)
      Me.Rows.Remove(row)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
      Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
      Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
      Dim ds As AppData = New AppData()
      Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
      any1.Namespace = "http://www.w3.org/2001/XMLSchema"
      any1.MinOccurs = New Decimal(0)
      any1.MaxOccurs = Decimal.MaxValue
      any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any1)
      Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
      any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
      any2.MinOccurs = New Decimal(1)
      any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
      sequence.Items.Add(any2)
      Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
      attribute1.Name = "namespace"
      attribute1.FixedValue = ds.Namespace
      type.Attributes.Add(attribute1)
      Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
      attribute2.Name = "tableTypeName"
      attribute2.FixedValue = "AppTypeDataTable"
      type.Attributes.Add(attribute2)
      type.Particle = sequence
      Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
      If xs.Contains(dsSchema.TargetNamespace) Then
        Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Try
          Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
          dsSchema.Write(s1)
          Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
          Do While schemas.MoveNext
            schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
            s2.SetLength(0)
            schema.Write(s2)
            If (s1.Length = s2.Length) Then
              s1.Position = 0
              s2.Position = 0

              Do While ((s1.Position <> s1.Length) _
                          AndAlso (s1.ReadByte = s2.ReadByte))


              Loop
              If (s1.Position = s1.Length) Then
                Return type
              End If
            End If

          Loop
        Finally
          If (Not (s1) Is Nothing) Then
            s1.Close()
          End If
          If (Not (s2) Is Nothing) Then
            s2.Close()
          End If
        End Try
      End If
      xs.Add(dsSchema)
      Return type
    End Function
  End Class

  '''<summary>
  '''Represents strongly named DataRow class.
  '''</summary>
  Partial Public Class AppRow
    Inherits Global.System.Data.DataRow

    Private tableApp As AppDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
      MyBase.New(rb)
      Me.tableApp = CType(Me.Table, AppDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property id_App() As String
      Get
        Return CType(Me(Me.tableApp.id_AppColumn), String)
      End Get
      Set(value As String)
        Me(Me.tableApp.id_AppColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property AppPath() As String
      Get
        Return CType(Me(Me.tableApp.AppPathColumn), String)
      End Get
      Set(value As String)
        Me(Me.tableApp.AppPathColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property id_AppType() As Short
      Get
        Return CType(Me(Me.tableApp.id_AppTypeColumn), Short)
      End Get
      Set(value As Short)
        Me(Me.tableApp.id_AppTypeColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property StartWithXBMC() As Boolean
      Get
        Try
          Return CType(Me(Me.tableApp.StartWithXBMCColumn), Boolean)
        Catch e As Global.System.InvalidCastException
          Throw New Global.System.Data.StrongTypingException("The value for column 'StartWithXBMC' in table 'App' is DBNull.", e)
        End Try
      End Get
      Set(value As Boolean)
        Me(Me.tableApp.StartWithXBMCColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property KeepFocus() As Boolean
      Get
        Try
          Return CType(Me(Me.tableApp.KeepFocusColumn), Boolean)
        Catch e As Global.System.InvalidCastException
          Throw New Global.System.Data.StrongTypingException("The value for column 'KeepFocus' in table 'App' is DBNull.", e)
        End Try
      End Get
      Set(value As Boolean)
        Me(Me.tableApp.KeepFocusColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property AppTypeRow() As AppTypeRow
      Get
        Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_AppType_App")), AppTypeRow)
      End Get
      Set(value As AppTypeRow)
        Me.SetParentRow(value, Me.Table.ParentRelations("FK_AppType_App"))
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function IsStartWithXBMCNull() As Boolean
      Return Me.IsNull(Me.tableApp.StartWithXBMCColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub SetStartWithXBMCNull()
      Me(Me.tableApp.StartWithXBMCColumn) = Global.System.Convert.DBNull
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function IsKeepFocusNull() As Boolean
      Return Me.IsNull(Me.tableApp.KeepFocusColumn)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub SetKeepFocusNull()
      Me(Me.tableApp.KeepFocusColumn) = Global.System.Convert.DBNull
    End Sub
  End Class

  '''<summary>
  '''Represents strongly named DataRow class.
  '''</summary>
  Partial Public Class AppTypeRow
    Inherits Global.System.Data.DataRow

    Private tableAppType As AppTypeDataTable

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
      MyBase.New(rb)
      Me.tableAppType = CType(Me.Table, AppTypeDataTable)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property id_AppType() As Short
      Get
        Return CType(Me(Me.tableAppType.id_AppTypeColumn), Short)
      End Get
      Set(value As Short)
        Me(Me.tableAppType.id_AppTypeColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property AppTypeName() As String
      Get
        Return CType(Me(Me.tableAppType.AppTypeNameColumn), String)
      End Get
      Set(value As String)
        Me(Me.tableAppType.AppTypeNameColumn) = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Function GetAppRows() As AppRow()
      If (Me.Table.ChildRelations("FK_AppType_App") Is Nothing) Then
        Return New AppRow(-1) {}
      Else
        Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_AppType_App")), AppRow())
      End If
    End Function
  End Class

  '''<summary>
  '''Row event argument class
  '''</summary>
  <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Class AppRowChangeEvent
    Inherits Global.System.EventArgs

    Private eventRow As AppRow

    Private eventAction As Global.System.Data.DataRowAction

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New(ByVal row As AppRow, ByVal action As Global.System.Data.DataRowAction)
      MyBase.New()
      Me.eventRow = row
      Me.eventAction = action
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property Row() As AppRow
      Get
        Return Me.eventRow
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property Action() As Global.System.Data.DataRowAction
      Get
        Return Me.eventAction
      End Get
    End Property
  End Class

  '''<summary>
  '''Row event argument class
  '''</summary>
  <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
  Public Class AppTypeRowChangeEvent
    Inherits Global.System.EventArgs

    Private eventRow As AppTypeRow

    Private eventAction As Global.System.Data.DataRowAction

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New(ByVal row As AppTypeRow, ByVal action As Global.System.Data.DataRowAction)
      MyBase.New()
      Me.eventRow = row
      Me.eventAction = action
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property Row() As AppTypeRow
      Get
        Return Me.eventRow
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public ReadOnly Property Action() As Global.System.Data.DataRowAction
      Get
        Return Me.eventAction
      End Get
    End Property
  End Class
End Class
